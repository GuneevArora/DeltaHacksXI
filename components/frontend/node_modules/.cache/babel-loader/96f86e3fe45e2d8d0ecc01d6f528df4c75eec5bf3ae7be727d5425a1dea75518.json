{"ast":null,"code":"import{Streamlit,withStreamlitConnection}from\"streamlit-component-lib\";import React,{useCallback,useEffect,useMemo,useState}from\"react\";/**\n * This is a React-based component template. The passed props are coming from the \n * Streamlit library. Your custom args can be accessed via the `args` props.\n */import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function MyComponent(_ref){let{args,disabled,theme}=_ref;const{name}=args;const[isFocused,setIsFocused]=useState(false);const[numClicks,setNumClicks]=useState(0);const style=useMemo(()=>{if(!theme)return{};// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nconst borderStyling=\"1px solid \".concat(isFocused?theme.primaryColor:\"gray\");return{border:borderStyling,outline:borderStyling};},[theme,isFocused]);useEffect(()=>{Streamlit.setComponentValue(numClicks);},[numClicks]);// setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\n// Adding the style and theme here since they might effect the visual size of the component.\nuseEffect(()=>{Streamlit.setFrameHeight();},[style,theme]);/** Click handler for our \"Click Me!\" button. */const onClicked=useCallback(()=>{setNumClicks(prevNumClicks=>prevNumClicks+1);},[]);/** Focus handler for our \"Click Me!\" button. */const onFocus=useCallback(()=>{setIsFocused(true);},[]);/** Blur handler for our \"Click Me!\" button. */const onBlur=useCallback(()=>{setIsFocused(false);},[]);// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsxs(\"span\",{children:[\"Hello, \",name,\"! \\xA0\",/*#__PURE__*/_jsx(\"button\",{style:style,onClick:onClicked,disabled:disabled,onFocus:onFocus,onBlur:onBlur,children:\"Click Me!\"})]});}// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent);","map":{"version":3,"names":["Streamlit","withStreamlitConnection","React","useCallback","useEffect","useMemo","useState","jsx","_jsx","jsxs","_jsxs","MyComponent","_ref","args","disabled","theme","name","isFocused","setIsFocused","numClicks","setNumClicks","style","borderStyling","concat","primaryColor","border","outline","setComponentValue","setFrameHeight","onClicked","prevNumClicks","onFocus","onBlur","children","onClick"],"sources":["/home/jonathan/vs-code-library/DeltaHacksXI/component-template/template/my_component/frontend/src/MyComponent.tsx"],"sourcesContent":["import {\n  Streamlit,\n  withStreamlitConnection,\n  ComponentProps,\n} from \"streamlit-component-lib\"\nimport React, { useCallback, useEffect, useMemo, useState, ReactElement } from \"react\"\n\n/**\n * This is a React-based component template. The passed props are coming from the \n * Streamlit library. Your custom args can be accessed via the `args` props.\n */\nfunction MyComponent({ args, disabled, theme }: ComponentProps): ReactElement {\n  const { name } = args\n\n  const [isFocused, setIsFocused] = useState(false)\n  const [numClicks, setNumClicks] = useState(0)\n\n  const style: React.CSSProperties = useMemo(() => {\n    if (!theme) return {}\n\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    return { border: borderStyling, outline: borderStyling }\n  }, [theme, isFocused])\n\n  useEffect(() => {\n    Streamlit.setComponentValue(numClicks)\n  }, [numClicks])\n\n  // setFrameHeight should be called on first render and evertime the size might change (e.g. due to a DOM update).\n  // Adding the style and theme here since they might effect the visual size of the component.\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n  }, [style, theme])\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback((): void => {\n    setNumClicks((prevNumClicks) => prevNumClicks + 1)\n  }, [])\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback((): void => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback((): void => {\n    setIsFocused(false)\n  }, [])\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      Hello, {name}! &nbsp;\n      <button\n        style={style}\n        onClick={onClicked}\n        disabled={disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      >\n        Click Me!\n      </button>\n    </span>\n  )\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n"],"mappings":"AAAA,OACEA,SAAS,CACTC,uBAAuB,KAElB,yBAAyB,CAChC,MAAO,CAAAC,KAAK,EAAIC,WAAW,CAAEC,SAAS,CAAEC,OAAO,CAAEC,QAAQ,KAAsB,OAAO,CAEtF;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAIA,QAAS,CAAAC,WAAWA,CAAAC,IAAA,CAA0D,IAAzD,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,KAAsB,CAAC,CAAAH,IAAA,CAC5D,KAAM,CAAEI,IAAK,CAAC,CAAGH,IAAI,CAErB,KAAM,CAACI,SAAS,CAAEC,YAAY,CAAC,CAAGZ,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACa,SAAS,CAAEC,YAAY,CAAC,CAAGd,QAAQ,CAAC,CAAC,CAAC,CAE7C,KAAM,CAAAe,KAA0B,CAAGhB,OAAO,CAAC,IAAM,CAC/C,GAAI,CAACU,KAAK,CAAE,MAAO,CAAC,CAAC,CAErB;AACA;AACA,KAAM,CAAAO,aAAa,cAAAC,MAAA,CAAgBN,SAAS,CAAGF,KAAK,CAACS,YAAY,CAAG,MAAM,CAAE,CAC5E,MAAO,CAAEC,MAAM,CAAEH,aAAa,CAAEI,OAAO,CAAEJ,aAAc,CAAC,CAC1D,CAAC,CAAE,CAACP,KAAK,CAAEE,SAAS,CAAC,CAAC,CAEtBb,SAAS,CAAC,IAAM,CACdJ,SAAS,CAAC2B,iBAAiB,CAACR,SAAS,CAAC,CACxC,CAAC,CAAE,CAACA,SAAS,CAAC,CAAC,CAEf;AACA;AACAf,SAAS,CAAC,IAAM,CACdJ,SAAS,CAAC4B,cAAc,CAAC,CAAC,CAC5B,CAAC,CAAE,CAACP,KAAK,CAAEN,KAAK,CAAC,CAAC,CAElB,gDACA,KAAM,CAAAc,SAAS,CAAG1B,WAAW,CAAC,IAAY,CACxCiB,YAAY,CAAEU,aAAa,EAAKA,aAAa,CAAG,CAAC,CAAC,CACpD,CAAC,CAAE,EAAE,CAAC,CAEN,gDACA,KAAM,CAAAC,OAAO,CAAG5B,WAAW,CAAC,IAAY,CACtCe,YAAY,CAAC,IAAI,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,+CACA,KAAM,CAAAc,MAAM,CAAG7B,WAAW,CAAC,IAAY,CACrCe,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACA;AACA;AACA,mBACER,KAAA,SAAAuB,QAAA,EAAM,SACG,CAACjB,IAAI,CAAC,QACb,cAAAR,IAAA,WACEa,KAAK,CAAEA,KAAM,CACba,OAAO,CAAEL,SAAU,CACnBf,QAAQ,CAAEA,QAAS,CACnBiB,OAAO,CAAEA,OAAQ,CACjBC,MAAM,CAAEA,MAAO,CAAAC,QAAA,CAChB,WAED,CAAQ,CAAC,EACL,CAAC,CAEX,CAEA;AACA;AACA;AACA;AACA;AACA,cAAe,CAAAhC,uBAAuB,CAACU,WAAW,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}